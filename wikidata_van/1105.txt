-----METADATA
46499
0
unknown
0
True
False
False
False
[[WP:AES|←]]Replaced content with 'AHHHHHHHHHHH'
18984
-----ADDED
AHHHHHHHHHHH 
-----DELETED
Otheruses WYSIWYG pron-en ˈwɪziˌwɪg <ref>Dictionary com Unabridged Retrieved November 09, 2007, from Dictionary com website: http://dictionary reference com/browse/wysiwyg</ref> is an for What You See Is What You Get The term is used in to describe system in which content displayed during editing appears very similar to the final output,<ref> cite web url http://www askoxford com/concise_oed/wysiwyg?view uk title Compact Oxford English Dictionary: WYSIWYG publisher Oxford University Press </ref> which might be printed document, web page, slide presentation or even the lighting for theatrical event Citation needed date November 2009 The phrase was originally popularized by drag persona "Geraldine" from in the late 60s and then on until 1974 who would often say "What you see is what you get" to excuse her quirky behavior Unreferenced section date December 2008 WYSIWYG implies that allows the user to view something very similar to the end result while the is being created In general WYSIWYG implies the ability to directly manipulate the of document without having to type or remember names of layout commands The actual meaning depends on the users perspective, *In s, and WYSIWYG means the display precisely represents the appearance of the page displayed to the end-user, but does not necessarily reflect how the page will be printed unless the printer is specifically matched to the editing program, as it was with the and early versions of the *In Word Processing and applications, WYSIWYG means the display simulates the appearance and precisely represents the effect of fonts and line breaks on the final pagination using specific so that citation on page of 500-page document can accurately refer to reference three hundred pages later *WYSIWYG also describes ways to manipulate 3D models in and is the brand name of http://www castlighting com/cast/software/products jsp?SUBCATID Cast Softwares lighting design tool used in the theatre industry for pre-visualisation of shows code, which when compiled will produce document that will look very similar to the document on the left Compilation of formatting code is not WYSIWYG process Modern software does good job of optimizing the screen display for particular type of output For example, is optimized for output to typical printer The software often emulates the resolution of the printer in order to get as close as possible to WYSIWYG However, that is not the main attraction of WYSIWYG, which is the ability of the user to be able to visualize what he or she is producing In many situations, the subtle differences between what you see and what you get are unimportant In fact, applications may offer multiple WYSIWYG modes with different levels of "realism," including *A composition mode, in which the user sees something somewhat similar to the end result, but with additional information useful while composing, such as section breaks and non-printing characters, and uses layout that is more conducive to composing than to layout *A layout mode, in which the user sees something very similar to the end result, but with some additional information useful in ensuring that elements are properly aligned and spaced, such as margin lines *A preview mode, in which the application attempts to present representation that is as close to the final result as possible Applications may deliberately deviate or offer alternative composing layouts from WYSIWYG because of overhead or the users preference to enter commands or code directly system Before the adoption of WYSIWYG techniques, text appeared in editors using the same and style with little indication of layout s, spacing, etc Users were required to enter special non-printing control codes now referred to as markup code tags to indicate that some text should be in or different or size These applications typically used an arbitrary to define the codes/tags Each program had its own special way to format document, and it was difficult and time consuming process to change from one word processor to another Using markup codes remains popular today for some basic text editing applications due to the simplicity of using tags to store complex formatting information that the editor cannot display But when the tags are visible in the editor, all the unformatted text must flow to the right and downward, moving the text out of place from where it would actually appear when printed in the final form document preparation program for the produced at Xerox PARC by Butler Lampson, Charles Simonyi and colleagues in 1974, is generally considered the first program to incorporate WYSIWYG technology, displaying text with formatting with justification, fonts, and proportional spacing of characters The Alto monitor 72 was designed so that one full page of text could be seen and then printed on the first When the text was laid out on the screen 72 PPI font metric files were used, but when printed 300 PPI files were used &mdash; thus one would occasionally find characters and words slightly off, problem that continues to this day 72 PPI came from new measure of 72 "PostScript points" per inch Prior to this, the standard measure of 72 27 points per inch was used in typeface design, graphic design, typesetting and printing Bravo was never released commercially, but the software eventually included in the can be seen as direct descendant of it <ref>Brad Myers http://www cs cmu edu/~amulet/papers/uihistory tr html Brief History of Human Computer Interaction Technology ACM interactions Vol 5, no 2, March, 1998 pp 44-54 </ref> In parallel with but independent of the work at Xerox PARC, Hewlett Packard developed and released in late 1978 the first commercial WYSIWYG software application for producing overhead slides or what today is called presentation graphics The first release, named "BRUNO" after an HP sales training puppet ran on the HP-1000 minicomputer taking advantage of HPs first bit-mapped computer terminal BRUNO was then ported to the HP-3000 and re-released as "HP Draw" In the 1970s and early 1980s, most popular lacked the sophisticated graphics capabilities necessary to display WYSIWYG documents, meaning that such applications were usually confined to limited-purpose, high-end workstations such as the that were too expensive to be afforded by the general public Towards the mid 1980s, however, things began to change Improving technology allowed the production of cheaper bitmapped displays, and WYSIWYG software started to appear for more popular computers, including for the released in 1983, and for the released in 1984 The system was originally designed so that the and the resolution of the sold by Apple were easily scaled: 72 for the screen and 144 for the printers Thus, the on-screen output of programs such as and were easily translated to the printer output and allowed WYSIWYG editing With the introduction of s, resolutions deviated from even multiples of the screen resolution, making WYSIWYG harder to achieve Origination of this phrase from one of the engineers Larry Sinclair at Triple Information International to express the idea that what you see on the screen is what you get on the printer on the "Page Layout System" pre-press typesetting system at the time called the "AIDS system Automated Information Documentation System first prototype shown at ANPS in Las Vegas and bought right off the showroom floor by the Pasadena Star News that year The phrase was originated by newsletter published by Arlene and Jose Ramos, called WYSIWYG It was created for the emerging Pre-Press industry going electronic in the late 1970s After three years of publishing, the newsletter was sold to employees at the Stanford Research Institute in California Seybold and the researchers at PARC were simply reappropriating popular of the time originated by "Geraldine", drag persona from in the late 60s and then on 1970–1974 <ref> cite book last Hiltzik first Michael authorlink Michael Hiltzik title Dealers of Lightning: Xerox PARC and the Dawn of the Computer Age publisher year 1999 page 200 isbn 0-88730-891-0 </ref><ref> cite book title Go To last Lohr first Steve authorlink coauthors year 2001 publisher Basic Books location isbn 0465042260 page 128 pages url http://books google com/books?id _YijJS-4I5QC </ref> Unreferenced section date December 2008 Because designers of WYSIWYG applications typically have to account for variety of different output devices, each of which has different capabilities, there are number of problems that must be solved in each implementation These can be seen as tradeoffs between multiple design goals, and hence applications that use different solutions may be suitable for different purposes Typically, the design goals of WYSIWYG application may include *Provide high-quality printed output on particular printer *Provide high-quality printed output on variety of printers *Provide high-quality on-screen output *Allow the user to visualise what the document will look like when printed It is not usually possible to achieve all of these goals at once The major problem to be overcome is that of varying output resolution As of 2007, monitors typically have resolution of between 92 and 125 pixels per inch Printers generally have resolutions between 240 and 1440 pixels per inch; in some printers the horizontal resolution is different from the vertical This becomes problem when trying to lay out text; because older output technologies require the spacing between characters to be whole number of pixels, rounding errors will cause the same text to require different amounts of space in different resolutions Solutions to this include *Always laying out the text using resolution higher than you are likely to use in practice This can result in poor quality output for lower resolution devices although techniques such as may help mitigate this but provides fixed layout, allowing easy user visualisation This is the method used by *Laying out the text at the resolution of the printer the document will be printed on This can result in low quality on-screen output, and the layout may sometimes change if the document is printed on different printer although this problem occurs less frequently with higher resolution printers, as rounding errors are smaller This is the method used by *Laying out the text at the resolution of specific printer in most cases the default one the document will be printed on using the same font information and kerning The character positions and number of characters in line are exactly similar to the printed document This is the method used by TX Text Control, word processing software component *Laying out the text at the resolution for the output device it will be sent to This often results in changes in layout between the on-screen display and printed output, so is rarely used It is common in web page designing tools that claim to be WYSIWYG, however Other problems that have been faced in the past include printers that have selection of fonts that are not identical to those used for on-screen display largely solved by the use of downloadable font technologies like and matching color profiles between different devices mostly solved now thanks to printer drivers with good color model conversion software All versions of since support unconstrained glyph placement The positioning and spacing of glyphs on-screen will exactly match printed documents unless programmer specifically writes their program to act otherwise Applications for that use the included with the OS since may place glyphs freely Older Windows programs that use the the drawing system for all versions of Windows prior to Windows Vista are constrained by whole-pixel glyph positioning unless programmers produce custom text rendering code that calculates individual pixel colours for itself Many variations are used only to illustrate point or make joke, and have very limited real use Some that have been proposed include <!-- Please dont add anything to this list that isnt related in some way to WYSIWYG user interfaces --> *WYSIMOLWYG, What You See Is More Or Less What You Get, recognizing that most WYSIWYG implementations are imperfect *WYSIAYG, What You See Is All You Get, used to point out that style of "heading" that refers to specification of 15 bold" provides more useful information than style of "Helvetica 15 bold" every time heading is used This is also what prefers to call WYSIWYG since he feels it limits possibilities by modeling what we can do on paper<ref>http://www invisiblerevolution net Invisible Revolution</ref> *, What You See Is What You Mean You see what best conveys the message *WYCIWYG, What You Cache is What You Get "wyciwyg://" turns up occasionally in the address bar of -based like when the browser is retrieving information Unauthorized access to wyciwyg:// documents was fixed by Mozilla in Firefox version <ref> http://www mozilla org/security/announce/2007/mfsa2007-24 html MFSA 2007-24 Unauthorized access to wyciwyg:// documents </ref> *WYSYHYG, What You See You Hope You Get IPA /ˈwɪzihɪɡ/ term ridiculing software; used in the Video Collection, video distributed around 1991 on two cassettes at promotional events *, What You See Is What You Sign, an important requirement for digital signature software It means that the software has to be able to show you the content without any hidden content before you sign it *WYSIWYW, What You See Is What You Want, used to describe editing platform<ref> http://texmacs org Welcome to GNU TeXmacs FSF GNU project <!-- Bot generated title --> </ref> The abbreviation clarifies that unlike in WYSIWYG editors, the user is able to customize WYSIWYW platforms to partly act as manual typesetting programs such as or *YAFIYGI, You Asked For It You Got It term used to describe text-command oriented document editing system that does not include WYSIWYG, in reference to the fact that users of such systems often ask for something they didnt really want Effectively the opposite of WYSIWYG The phrase was first used in this context in 1983 in the essay to describe the text editor system, and began to abbreviated circa 1993 <ref> cite web url http://catb org/~esr/jargon/html/Y/YAFIYGI html title The Jargon File 7: YAFIYGI author Eric Raymond ed </ref><ref> cite web url http://www pbm com/~lindahl/real programmers html title Real Programmers Dont Use Pascal originally published in Datamation vol 29 no 7, July 1983 </ref> <!-- Please dont add anything to this list that isnt related in some way to WYSIWYG user interfaces --> Reflist http://catb org/~esr/jargon/html/W/WYSIWYG html The Jargon File entry for WYSIWYG http://xml coverpages org/taylorWYSIWYG html What has WYSIWYG done to us? Critical paper about the negative effects the introduction of WYSIWYG has had as of 1996 http://www freesoftwaremagazine com/free_issues/issue_03/practical_applications_xml XML: WYSIWYG to WYSIWYM brief look at XML document authoring An article on existing XML authoring software May 2005 *ATPM coms http://www atpm com/4 12/page7 shtml WYSIWYG: Is it What You Want? 